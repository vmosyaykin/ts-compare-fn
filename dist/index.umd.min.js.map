{"version":3,"file":"index.umd.min.js","sources":["../src/index.ts"],"sourcesContent":["type SortConfig<Type extends object> =\n    | SortOption<Type>\n    | SortPathConfig<Type>\n    | Getter<Type>\n    | SortGetterConfig<Type>;\n\ntype LocaleOptions = {\n    locale?: string;\n    collator?: Collator;\n};\n\ntype SortPathConfig<Type extends object> = {\n    [Path in SortablePath<Type>]: {\n        path: Path | `-${Path}`;\n        order?: 'asc' | 'desc' | -1 | 1;\n        defaultValue?: TypeAtPath<Type, Path>;\n    } & LocaleOptions;\n}[SortablePath<Type>];\n\ntype SortGetterConfig<Type extends object> = {\n    get: Getter<Type>;\n    order?: 'asc' | 'desc' | -1 | 1;\n} & LocaleOptions;\n\ntype SortOptionAndLocaleOptionsTuple<Type extends object> = {\n    [Path in SortablePath<Type>]: [\n        Path | `-${Path}`,\n        LocaleOptions & { defaultValue?: TypeAtPath<Type, Path> },\n    ];\n}[SortablePath<Type>];\n\nexport function compareFn<Type extends object>(\n    ...params: SortOptionAndLocaleOptionsTuple<Type>\n): (a: Type, b: Type) => number;\nexport function compareFn<Type extends object>(\n    ...params: [\n        SortConfig<Type>,\n        SortConfig<Type>,\n        ...SortConfig<Type>[],\n        LocaleOptions,\n    ]\n): (a: Type, b: Type) => number;\nexport function compareFn<Type extends object>(\n    ...params: [SortConfig<Type>, ...SortConfig<Type>[]]\n): (a: Type, b: Type) => number;\nexport function compareFn<Type extends object>(\n    ...params: (SortConfig<Type> | LocaleOptions)[]\n): (a: Type, b: Type) => number {\n    const defaultLocale = 'en-u-co-eor-kn';\n\n    let options = params[params.length - 1];\n\n    if (!options || !isLocaleOptions(options)) {\n        options = {};\n    }\n\n    const resolvedOptions = {\n        ...(options && isLocaleOptions(options) ? options : {}),\n        collator:\n            options.collator ??\n            new Intl.Collator(options.locale ?? defaultLocale),\n    };\n\n    const comparators: Comparator<Type>[] = [];\n\n    for (const param of params) {\n        if (isSortOption(param)) {\n            const isAscPath = isAscOption(param);\n\n            comparators.push({\n                dir: isAscPath ? 1 : -1,\n                path: isAscPath\n                    ? param\n                    : (param.substring(1) as AscOption<Type>),\n                ...resolvedOptions,\n            });\n        }\n\n        if (isGetter(param)) {\n            comparators.push({\n                dir: 1,\n                get: param,\n                ...resolvedOptions,\n            });\n        }\n\n        if (isSortPathConfig(param)) {\n            const isAscPath = isAscOption(param.path);\n\n            if (param.locale && !param.collator) {\n                param.collator = new Intl.Collator(param.locale);\n            }\n\n            comparators.push({\n                dir:\n                    param.order === 'desc' || param.order === -1\n                        ? -1\n                        : isAscPath\n                          ? 1\n                          : -1,\n                ...resolvedOptions,\n                ...param,\n                path: (isAscPath\n                    ? param.path\n                    : param.path.substring(1)) as AscOption<Type>,\n            });\n        }\n\n        if (isSortGetterConfig(param)) {\n            if (param.locale && !param.collator) {\n                param.collator = new Intl.Collator(param.locale);\n            }\n\n            comparators.push({\n                dir: param.order === 'desc' || param.order === -1 ? -1 : 1,\n                ...resolvedOptions,\n                ...param,\n            });\n        }\n    }\n\n    return (aObject, bObject) => {\n        for (const comparator of comparators) {\n            const { dir, path, collator, defaultValue, get } = comparator;\n\n            let a, b;\n\n            if (path) {\n                a = getByPath(aObject, path);\n                b = getByPath(bObject, path);\n            }\n\n            if (get) {\n                a = get(aObject);\n                b = get(bObject);\n            }\n\n            if (a === null) a = undefined;\n            if (b === null) b = undefined;\n\n            if (Object.is(a, b)) continue;\n\n            if (\n                typeof a !== typeof b &&\n                a instanceof Date !== b instanceof Date &&\n                a !== undefined &&\n                b !== undefined\n            ) {\n                throw new Error(`Cannot compare ${typeof a} and ${typeof b}`);\n            }\n\n            const type = a ? typeof a : typeof b;\n            const instanceOfDate = a instanceof Date || b instanceof Date;\n\n            if (\n                defaultValue !== undefined &&\n                defaultValue !== null &&\n                type === typeof defaultValue &&\n                instanceOfDate === defaultValue instanceof Date\n            ) {\n                a = a ?? defaultValue;\n                b = b ?? defaultValue;\n            }\n\n            if (a === undefined) return dir;\n            if (b === undefined) return -dir;\n\n            if (\n                (typeof a === 'number' && typeof b === 'number') ||\n                (typeof a === 'bigint' && typeof b === 'bigint') ||\n                (a instanceof Date && b instanceof Date)\n            ) {\n                if (Number.isNaN(a)) return dir;\n                if (Number.isNaN(b)) return -dir;\n\n                if (a > b) return dir;\n                if (a < b) return -dir;\n\n                continue;\n            }\n\n            if (typeof a === 'string' && typeof b === 'string') {\n                const compareResult = collator.compare(a, b);\n                if (compareResult) return dir * compareResult;\n\n                continue;\n            }\n\n            if (typeof a === 'boolean' && typeof b === 'boolean') {\n                return a ? dir : -dir;\n            }\n        }\n\n        return 0;\n    };\n}\n\ntype NoSpecialChars<Key extends string | undefined> = Key extends\n    | `-${string}`\n    | `${string}.${string}`\n    ? never\n    : `${Key}`;\n\ntype Path<Object, Leaf, Index extends string = string> = Object extends object\n    ? {\n          [Key in keyof Required<Object>]: Key extends Index\n              ? Required<Object>[Key] extends Leaf\n                  ? NoSpecialChars<Key>\n                  : Required<Object>[Key] extends unknown[]\n                    ? `${Key}.${Path<Required<Object>[Key], Leaf, TupleIndex<Required<Object>[Key]>> | 'length'}`\n                    : Required<Object>[Key] extends object\n                      ? `${Key}.${Path<Required<Object>[Key], Leaf>}`\n                      : never\n              : never;\n      }[keyof Required<Object> & Index]\n    : never;\n\ntype TupleIndex<Tuple extends unknown[]> = Exclude<\n    keyof Tuple,\n    keyof unknown[]\n> &\n    string;\n\ntype Nullishable<Type> = Type | null | undefined;\ntype SortablePath<Type> =\n    | Path<Type, Nullishable<number>>\n    | Path<Type, Nullishable<bigint>>\n    | Path<Type, Nullishable<Date>>\n    | Path<Type, Nullishable<string>>\n    | Path<Type, Nullishable<boolean>>;\n\ntype TypeAtPath<\n    Object,\n    Path extends string,\n> = Path extends `${infer Key}.${infer Rest}`\n    ? Key extends keyof Object\n        ? TypeAtPath<Object[Key], Rest>\n        : never\n    : Path extends keyof Object\n      ? Object[Path]\n      : never;\n\ntype AscOption<Type> = SortablePath<Type>;\ntype DescOption<Type> = `-${SortablePath<Type>}`;\ntype SortOption<Type> = AscOption<Type> | DescOption<Type>;\n\ntype Getter<Type extends object> =\n    | ((object: Type) => Nullishable<number>)\n    | ((object: Type) => Nullishable<bigint>)\n    | ((object: Type) => Nullishable<Date>)\n    | ((object: Type) => Nullishable<string>)\n    | ((object: Type) => Nullishable<boolean>);\n\nfunction isAscOption<Type>(\n    sortPath: SortOption<Type>\n): sortPath is AscOption<Type> {\n    return !sortPath.startsWith('-');\n}\n\nfunction isSortOption<Type extends object>(\n    sort: SortConfig<Type> | LocaleOptions\n): sort is SortOption<Type> {\n    return typeof sort === 'string';\n}\n\nfunction isGetter<Type extends object>(\n    sort: SortConfig<Type> | LocaleOptions\n): sort is Getter<Type> {\n    return typeof sort === 'function';\n}\n\nfunction isSortPathConfig<Type extends object>(\n    sort: SortConfig<Type> | LocaleOptions\n): sort is SortPathConfig<Type> {\n    return typeof sort === 'object' && 'path' in sort;\n}\n\nfunction isSortGetterConfig<Type extends object>(\n    sort: SortConfig<Type> | LocaleOptions\n): sort is SortGetterConfig<Type> {\n    return typeof sort === 'object' && 'get' in sort;\n}\n\nfunction isLocaleOptions<Type extends object>(\n    sort: SortConfig<Type> | LocaleOptions\n): sort is LocaleOptions {\n    return typeof sort === 'object' && !('path' in sort);\n}\n\ntype Sortable = string | number | bigint | boolean | Date | null | undefined;\n\ntype Collator = { compare: (x: string, y: string) => number };\ntype Comparator<Type extends object> = {\n    dir: 1 | -1;\n    path?: SortablePath<Type> | undefined;\n    get?: (object: Type) => Sortable | undefined;\n    collator: Collator;\n    defaultValue?: unknown;\n} & LocaleOptions;\n\nfunction getByPath<Type extends object>(obj: Type, path: SortablePath<Type>) {\n    const parts = path.split('.');\n\n    let result: unknown = obj;\n\n    for (const part of parts) {\n        if (typeof result !== 'object' || result === null) {\n            throw new Error(`Invalid path: ${path}`);\n        }\n\n        result = result[part as keyof object];\n    }\n\n    return result as Sortable;\n}\n"],"names":["isAscOption","sortPath","startsWith","isGetter","sort","isSortPathConfig","isSortGetterConfig","isLocaleOptions","getByPath","obj","path","parts","split","result","part","Error","params","options","length","resolvedOptions","collator","Intl","Collator","locale","comparators","param","isAscPath","push","dir","substring","get","order","aObject","bObject","comparator","defaultValue","a","b","undefined","Object","is","Date","instanceOfDate","Number","isNaN","compareResult","compare"],"mappings":"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"}