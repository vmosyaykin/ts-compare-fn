{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["type SortablePrimitive = number | boolean | string | bigint | undefined | null;\ntype SortableObject = Date;\ntype SortableValue = SortablePrimitive | SortableObject;\n\ntype ComparatorOptions = {\n    defaultString?: string;\n    defaultNumber?: number;\n    transform?: (value: SortableValue) => SortableValue;\n    locale?: string;\n    collator?: Collator;\n};\n\ntype SortConfig<Type extends object> = {\n    [Path in SortablePath<Type>]: {\n        path: Path;\n        direction?: 'asc' | 'desc' | -1 | 1;\n        transform?: (value: TypeAtPath<Type, Path>) => SortableValue;\n    } & Omit<ComparatorOptions, 'transform'>;\n}[SortablePath<Type>];\n\ntype Sort<Type extends object> = SortConfig<Type> | SortPath<Type>;\n\nexport function createSortFn<Type extends object>(\n    ...params: [Sort<Type>, ...Sort<Type>[], ComparatorOptions]\n): (a: Type, b: Type) => number;\nexport function createSortFn<Type extends object>(\n    ...params: [Sort<Type>, ...Sort<Type>[]]\n): (a: Type, b: Type) => number;\nexport function createSortFn<Type extends object>(\n    ...params: (Sort<Type> | ComparatorOptions)[]\n): (a: Type, b: Type) => number {\n    const defaultLocale = 'en-u-co-eor-kn';\n\n    let options = params[params.length - 1];\n\n    if (!options || !isComparatorOptions(options)) {\n        options = {};\n    }\n\n    if (!options.collator) {\n        options.collator = new Intl.Collator(options.locale ?? defaultLocale);\n    }\n\n    const comparators: Comparator<Type>[] = [];\n\n    for (const param of params) {\n        if (isSortPath(param)) {\n            comparators.push({\n                dir: isAscPath(param) ? 1 : -1,\n                path: isAscPath(param)\n                    ? param\n                    : (param.substring(1) as AscPath<Type>),\n                ...(options as typeof options & { collator: Collator }),\n            });\n        }\n\n        if (isSortConfig(param)) {\n            if (param.locale && !param.collator) {\n                param.collator = new Intl.Collator(param.locale);\n            }\n\n            comparators.push({\n                dir:\n                    param.direction === 'desc' || param.direction === -1\n                        ? -1\n                        : 1,\n                ...(options as typeof options & { collator: Collator }),\n                ...param,\n            });\n        }\n    }\n\n    return (aObject, bObject) => {\n        for (const comparator of comparators) {\n            const {\n                dir,\n                path,\n                collator,\n                defaultNumber,\n                defaultString,\n                transform,\n            } = comparator;\n\n            let a = getByPath(aObject, path);\n            let b = getByPath(bObject, path);\n\n            if (transform) {\n                a = transform(a);\n                b = transform(b);\n            }\n\n            if (a === null) a = undefined;\n            if (b === null) b = undefined;\n\n            if (Object.is(a, b)) continue;\n\n            if (\n                typeof a !== typeof b &&\n                a instanceof Date !== b instanceof Date &&\n                a !== undefined &&\n                b !== undefined\n            ) {\n                throw new Error(`Cannot compare ${typeof a} and ${typeof b}`);\n            }\n\n            const type = a ? typeof a : typeof b;\n\n            if (type === 'number') {\n                a = a ?? defaultNumber;\n                b = b ?? defaultNumber;\n            }\n\n            if (type === 'string') {\n                a = a ?? defaultString;\n                b = b ?? defaultString;\n            }\n\n            if (a === undefined) return dir;\n            if (b === undefined) return -dir;\n\n            if (\n                (typeof a === 'number' && typeof b === 'number') ||\n                (typeof a === 'bigint' && typeof b === 'bigint') ||\n                (a instanceof Date && b instanceof Date)\n            ) {\n                if (Number.isNaN(a)) return dir;\n                if (Number.isNaN(b)) return -dir;\n\n                if (a > b) return dir;\n                if (a < b) return -dir;\n\n                continue;\n            }\n\n            if (typeof a === 'string' && typeof b === 'string') {\n                const compareResult = collator.compare(a, b);\n                if (compareResult) return dir * compareResult;\n\n                continue;\n            }\n\n            if (typeof a === 'boolean' && typeof b === 'boolean') {\n                return a ? dir : -dir;\n            }\n        }\n\n        return 0;\n    };\n}\n\ntype NoSpecialChars<Key extends string | undefined> = Key extends `-${string}`\n    ? never\n    : `${Key}`;\n\ntype Path<Object, Leaf, Index extends string = string> = Object extends object\n    ? {\n          [Key in keyof Object]: Key extends Index\n              ? Object[Key] extends Leaf\n                  ? NoSpecialChars<Key>\n                  : Object[Key] extends unknown[]\n                    ? `${Key}.${Path<Object[Key], Leaf, TupleKeys<Object[Key]>> | 'length'}`\n                    : Object[Key] extends object\n                      ? `${Key}.${Path<Object[Key], Leaf>}`\n                      : never\n              : never;\n      }[keyof Object & Index]\n    : never;\n\ntype TupleKeys<T extends unknown[]> = Exclude<keyof T, keyof unknown[]> &\n    string;\n\ntype TypeAtPath<\n    Object,\n    Path extends string,\n> = Path extends `${infer Key}.${infer Rest}`\n    ? Key extends keyof Object\n        ? TypeAtPath<Object[Key], Rest>\n        : never\n    : Path extends keyof Object\n      ? Object[Path]\n      : never;\n\ntype SortablePath<Type> = Path<Type, SortableValue>;\n\ntype AscPath<Type> = SortablePath<Type>;\ntype DescPath<Type> = `-${SortablePath<Type>}`;\ntype SortPath<Type> = AscPath<Type> | DescPath<Type>;\n\nfunction isAscPath<Type>(sortPath: SortPath<Type>): sortPath is AscPath<Type> {\n    return !sortPath.startsWith('-');\n}\n\nfunction isSortPath<Type extends object>(\n    sort: Sort<Type> | ComparatorOptions\n): sort is SortPath<Type> {\n    return typeof sort === 'string';\n}\n\nfunction isSortConfig<Type extends object>(\n    sort: Sort<Type> | ComparatorOptions\n): sort is SortConfig<Type> {\n    return typeof sort === 'object' && 'path' in sort;\n}\n\nfunction isComparatorOptions<Type extends object>(\n    sort: Sort<Type> | ComparatorOptions\n): sort is ComparatorOptions {\n    return typeof sort === 'object' && !('path' in sort);\n}\n\ntype Collator = { compare: (x: string, y: string) => number };\ntype Comparator<Type extends object> = {\n    dir: 1 | -1;\n    path: SortablePath<Type>;\n    collator: Collator;\n} & ComparatorOptions;\n\nfunction getByPath<Type extends object>(obj: Type, path: SortablePath<Type>) {\n    const parts = path.split('.');\n\n    let result: unknown = obj;\n\n    for (const part of parts) {\n        if (typeof result !== 'object' || result === null) {\n            throw new Error(`Invalid path: ${path}`);\n        }\n\n        result = result[part as keyof object];\n    }\n\n    return result as SortableValue;\n}\n"],"names":[],"mappings":"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"}